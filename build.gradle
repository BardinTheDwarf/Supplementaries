buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'

    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
//apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

mixin {
    add sourceSets.main, "supplementaries.refmap.json"
}

version = '1.18.1-1.2.5'
group = 'net.mehvahdjukaar.supplementaries'
archivesBaseName = 'supplementaries'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    //mappings channel: 'official', version: '1.18.1'
    mappings channel: 'parchment', version: '2021.12.19-1.18.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {

            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'mixin.env.remapRefMap', 'true'
            arg "-mixin.config=supplementaries.mixins.json".toString()

            workingDirectory project.file('run')

            // Recommendedo logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                supplementaries {
                    source sourceSets.main
                }
            }
        }

        server {

            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'mixin.env.remapRefMap', 'true'
            arg "-mixin.config=supplementaries.mixins.json".toString()

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                supplementaries {
                    source sourceSets.main
                }
            }
        }

        data {

            //run data mixins?
            property 'mixin.env.remapRefMap', 'true'

            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //args "--mod", "supplementaries", "--all", "--output", "\"" + file("src/generated/resources").toString() + "\"", "--validate", "--existing", "\"" + sourceSets.main.resources.srcDirs[0] + "\""
            args '--mod', 'supplementaries', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]   //args "--mod", "usefulbackpacks", "--all", "--output", "\"" + file("src/generated/resources").toString() + "\"", "--validate", "--existing", "\"" + sourceSets.main.resources.srcDirs[0] + "\""

            mods {
                supplementaries {
                    source sourceSets.main
                }
            }
        }
    }
}


// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "supplementaries",
                "Specification-Vendor": "examplemodsareus",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"examplemodsareus",
                //"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "supplementaries.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
            allowInsecureProtocol = true
        }
    }
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.18.1-39.0.79'

    implementation fg.deobf("curse.maven:configured-457570:3640884")
    implementation fg.deobf("curse.maven:curios-309927:3648837")
    //implementation fg.deobf("curse.maven:farmersdelight-398521:3615366")
    implementation fg.deobf("curse.maven:framedblocks-441647:3548376")
    implementation fg.deobf("curse.maven:crimson-nbt-tags-445260:3542632")
    implementation fg.deobf("curse.maven:cc-tweaked-282001:3606346")
    implementation fg.deobf("curse.maven:create-328085:3706700")
    implementation fg.deobf("curse.maven:flywheel-486392:3687357")
    implementation fg.deobf("curse.maven:quark-243121:3662309")
    implementation fg.deobf("curse.maven:botania-225643:3664223")
    implementation fg.deobf("curse.maven:jei-238222:3651118")
    implementation fg.deobf("curse.maven:malum-484064:3579643")
    implementation fg.deobf("curse.maven:farmersdelight-398521:3575116")
    implementation fg.deobf("curse.maven:jade-324717:3564963")
    implementation fg.deobf("curse.maven:decorativeblocks-362528:3592481")
    implementation fg.deobf("curse.maven:patchouli-306770:3594394")
    implementation fg.deobf("curse.maven:tetra-289712:3586368")
    implementation fg.deobf("curse.maven:mgui-351914:3573121")
    implementation fg.deobf("curse.maven:texture-dump-319039:3573998")
    implementation fg.deobf("curse.maven:snow-real-magic-308663:3601344")
    implementation fg.deobf("curse.maven:map-atlases-forge-519759:3641038")
    implementation fg.deobf("curse.maven:kiwi-303657:3577626")
    implementation fg.deobf("curse.maven:waystones-245755:3658046")
    implementation fg.deobf("curse.maven:autoreglib-250363:3575622")
    implementation fg.deobf("curse.maven:balm-531761:3658029")
    implementation fg.deobf("curse.maven:selene-499980:3668969")
    //implementation fg.deobf("curse.maven:balm-531761:3658029")
    //implementation fg.deobf("curse.maven:snow-real-magic-308663:3601344")
    //implementation fg.deobf("curse.maven:kiwi-303657:3577626")

    //implementation fg.deobf("curse.maven:just-enough-resources-jer-240630:3489131")
    //implementation fg.deobf("curse.maven:inspirations-284007:3414517")
    //implementation fg.deobf("curse.maven:mantle-74924:3439180")
    //implementation fg.deobf("curse.maven:mantle-250363:3326041")
    //implementation fg.deobf("curse.maven:dynamictrees-252818:3480621")
    //implementation fg.deobf("curse.maven:enchanted-book-redesign-348076:3239927")


    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'




}

repositories {
    maven {
        url = "https://www.cursemaven.com"
        allowInsecureProtocol = true
    }
    maven {
        // location of the maven that hosts JEI files (And TiC)
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
        allowInsecureProtocol = true
    }
    maven {
        //location of the maven for mixed mappings and registrate
        name = "tterrag maven"
        url = "https://maven.tterrag.com/"
        allowInsecureProtocol = true
    }
    maven {
        // location of the maven that hosts JEI files (And TiC)
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
        allowInsecureProtocol = true
    }
    maven {
        //location of the maven for vazkii's mods
        name = "blamejared"
        url = "http://maven.blamejared.com/"
        allowInsecureProtocol = true
    }


}

// Loads files in the format {modid}-{version}.jar, MC version optional but picky about hyphens.
// See the regex pattern.
def getModVersion(filename) {
    // println(filename);
    def pattern = /^(?<modid>[^-]+)(?:-(?<mcversion>[0-9.]+))?(?:-(?<modver>[0-9.\-]+))\.jar$/;

    def matcher = filename =~ pattern

    def found = matcher.find()

    if(found) {
        def mod = matcher.group("modid");

        // Extract MC version or default
        def mcVersion = matcher.group("mcversion");

        // Extract mod version
        def version = matcher.group("modver");

        // println("> mod: ${mod}; mc: ${mcVersion}; version: ${version}");

        if(mcVersion == null)
            return "${mod}:${mod}:${version}";
        else
            return "${mod}:${mod}-${mcVersion}:${version}";

    } else {
        println(" > not a mod filename")
        return filename;
    }
}

def dev_mods_dir = "mods"

def dev_mods = fileTree(dev_mods_dir).filter { it -> it.isFile() }.files.name.collect( { getModVersion(it) } )

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }



dependencies{
    // Deobfuscate each dev mod for runtime
    dev_mods.each {
        compileOnly fg.deobf(it)
        runtimeOnly fg.deobf(it)
    }

    implementation 'org.jetbrains:annotations:22.0.0'
}

repositories{
    // Built mods
    flatDir {
        dirs dev_mods_dir
    }
    mavenCentral()
}